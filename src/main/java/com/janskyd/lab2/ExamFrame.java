/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.janskyd.lab2;

import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Ian Duncan
 */
public class ExamFrame extends javax.swing.JFrame {
    
    private int currentQuestionID = -1;
    private Exam exam;

    /**
     * Creates new form ExamFrame which will allow a user to take the given exam.
     * @param exam The exam to display to the user
     * @throws com.janskyd.lab2.InvalidQuestionException
     */
    public ExamFrame(Exam exam) throws InvalidQuestionException {
        
        this.exam = exam;
        
        initComponents();
        
        /* We have separate JPanel components for the welcome and finished "pages"
           of the exam, as well as for all the exam questions. We add all of these
           JPanels to the main panel of our JFrame, which has a CardLayout. As the
           user advances through the exam, we switch the current JPanel displayed
           as appropriate.
        */
        
        JPanel welcomePanel = new ExamWelcomePanel(exam.welcomeText());
        JPanel finishedPanel = new ExamFinishedPanel(exam.finishedText());
        
        this.mainPanel.add(welcomePanel, "WELCOME");
        this.mainPanel.add(finishedPanel, "FINISHED");
        
        for(int i = 0; i < exam.questions().size(); i++) {
            
            this.mainPanel.add(exam.questions().get(i).createJPanel(), "QUESTION" + String.valueOf(i));
            
        }
        
        CardLayout cl = (CardLayout)(this.mainPanel.getLayout());
        cl.show(this.mainPanel, "WELCOME");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel = new javax.swing.JLabel();
        continueButton = new javax.swing.JButton();
        mainPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Examination");
        setBounds(new java.awt.Rectangle(0, 0, 600, 400));
        setSize(new java.awt.Dimension(600, 400));

        titleLabel.setText("Welcome");
        titleLabel.setName(""); // NOI18N

        continueButton.setText("Start");
        continueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continueButtonActionPerformed(evt);
            }
        });

        mainPanel.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 514, Short.MAX_VALUE)
                        .addComponent(continueButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(titleLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(continueButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void continueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_continueButtonActionPerformed
        
        // We're currently at the welcome page
        if(this.currentQuestionID == -1) {
            
            this.currentQuestionID = 0; // Advance to the first question
            CardLayout cl = (CardLayout)(this.mainPanel.getLayout());
            cl.show(this.mainPanel, "QUESTION0");
            
            this.titleLabel.setText("Question 1 of " + String.valueOf(this.exam.questions().size()));
            
            this.continueButton.setText("Next Â»");
            
            
        } else if(this.currentQuestionID < this.exam.questions().size() - 1) {
            // We're currently in the middle of the exam. Advance to the next question.
            
            ExamQuestion question = this.exam.questions().get(this.currentQuestionID);
            
            if(question.hasAnswered()) {
                this.currentQuestionID += 1;
                CardLayout cl = (CardLayout)(this.mainPanel.getLayout());
                cl.show(this.mainPanel, "QUESTION" + String.valueOf(this.currentQuestionID));
                
                this.titleLabel.setText("Question " + String.valueOf(1 + this.currentQuestionID) + " of " + String.valueOf(this.exam.questions().size()));
                
                // If we're advancing to the last question, inform the user of this fact.
                if(this.currentQuestionID == this.exam.questions().size() - 1) {
                    this.continueButton.setText("Finish");
                }
                
            } else {
                JOptionPane.showMessageDialog(this, "You must answer this question to continue.");
            }
            
        } else if(this.currentQuestionID == this.exam.questions().size() - 1) {
            // We're currently on the last question. Advance to the finished page.
            ExamQuestion question = this.exam.questions().get(this.currentQuestionID);
            
            if(question.hasAnswered()) {
                this.currentQuestionID += 1;
                CardLayout cl = (CardLayout)(this.mainPanel.getLayout());
                cl.show(this.mainPanel, "FINISHED");
                
                this.titleLabel.setText("Finished");
                this.continueButton.setText("Exit");
            } else {
                JOptionPane.showMessageDialog(this, "You must answer this question to continue.");
            }
            
        } else {
            // We're currently on the finished page. Print the score report and exit.
            this.exam.printScoreReport();
            
            this.setVisible(false);
            this.dispose();
        }
        
    }//GEN-LAST:event_continueButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton continueButton;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
